/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var v=(l,s)=>{for(var e in s)c(l,e,{get:s[e],enumerable:!0})},k=(l,s,e,o)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of L(s))!f.call(l,t)&&t!==e&&c(l,t,{get:()=>s[t],enumerable:!(o=w(s,t))||o.enumerable});return l};var E=l=>k(c({},"__esModule",{value:!0}),l);var b={};v(b,{default:()=>a});module.exports=E(b);var n=require("obsidian"),m=require("@codemirror/view"),M=3,d=1,h=10,C=1,p=1,g=10,D={scrollMode:"smooth_repeat",scrollSpeed:M,singleScrollLines:C},a=class extends n.Plugin{constructor(){super(...arguments);this.animationFrameId=null;this.currentScrollDirection=0}async onload(){console.log("Loading Line Scroller plugin"),await this.loadSettings(),this.addSettingTab(new S(this.app,this)),this.activateCurrentMode()}onunload(){console.log("Unloading Line Scroller plugin"),this.stopScrolling()}async loadSettings(){this.settings=Object.assign({},D,await this.loadData()),this.settings.scrollSpeed=Math.max(d,Math.min(h,this.settings.scrollSpeed)),this.settings.singleScrollLines=Math.max(p,Math.min(g,this.settings.singleScrollLines))}async saveSettings(){await this.saveData(this.settings)}activateCurrentMode(){this.settings.scrollMode==="smooth_repeat"?this.activateSmoothRepeatMode():this.activateConfigurableHotkeyMode()}activateSmoothRepeatMode(){console.log("Line Scroller: Activating Smooth Repeat Mode"),this.registerDomEvent(document,"keydown",this.handleKeyDown.bind(this)),this.registerDomEvent(document,"keyup",this.handleKeyUp.bind(this)),this.registerDomEvent(window,"blur",this.stopScrolling.bind(this))}activateConfigurableHotkeyMode(){console.log("Line Scroller: Activating Configurable Hotkey Mode"),this.addCommand({id:"scroll-line-up",name:"Scroll view up (Line Scroller)",editorCallback:(e,o)=>{this.scrollLinesOnce(e,-1)},hotkeys:[{modifiers:["Ctrl"],key:"ArrowUp"}]}),this.addCommand({id:"scroll-line-down",name:"Scroll view down (Line Scroller)",editorCallback:(e,o)=>{this.scrollLinesOnce(e,1)},hotkeys:[{modifiers:["Ctrl"],key:"ArrowDown"}]})}handleKeyDown(e){if(!this.isSmoothRepeatModeActive()||!e.ctrlKey&&!e.metaKey)return;let o=0;if(e.key==="ArrowUp"?o=-1:e.key==="ArrowDown"&&(o=1),o===0)return;let t=this.app.workspace.activeLeaf;!t||!(t.view instanceof n.MarkdownView)||(e.preventDefault(),!(this.currentScrollDirection===o&&this.animationFrameId!==null)&&(this.stopScrolling(),this.currentScrollDirection=o,this.startSmoothScrollLoop()))}handleKeyUp(e){this.isSmoothRepeatModeActive()&&(e.key==="Control"||e.key==="Meta"||e.key==="ArrowUp"||e.key==="ArrowDown")&&this.stopScrolling()}isSmoothRepeatModeActive(){return this.settings.scrollMode==="smooth_repeat"}startSmoothScrollLoop(){if(this.animationFrameId===null){let e=()=>{this.currentScrollDirection!==0?(this.smoothScrollStep(),this.animationFrameId=requestAnimationFrame(e)):this.animationFrameId=null};this.animationFrameId=requestAnimationFrame(e)}}stopScrolling(){this.animationFrameId!==null&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null),this.currentScrollDirection=0}smoothScrollStep(){let e=this.app.workspace.activeLeaf;if(!e||!(e.view instanceof n.MarkdownView)){this.stopScrolling();return}let o=e.view.editor;try{let t=o.getScrollInfo(),i=this.settings.scrollSpeed*this.currentScrollDirection,r=Math.round(t.top+i);o.scrollTo(null,r)}catch(t){console.error("Error during smooth scroll step:",t),this.stopScrolling()}}scrollLinesOnce(e,o){let t=0,i=e.cm;if(i instanceof m.EditorView)t=i.defaultLineHeight;else{console.error("Line Scroller: Could not access CodeMirror EditorView.");return}if(t>0){let r=e.getScrollInfo(),u=t*o*this.settings.singleScrollLines,y=Math.round(r.top+u);e.scrollTo(null,y)}else console.error("Line Scroller: Invalid line height obtained.")}},S=class extends n.PluginSettingTab{constructor(e,o){super(e,o);this.plugin=o}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Line Scroller Settings"}),new n.Setting(e).setName("Operating Mode").setDesc("Choose the scrolling behavior. Requires plugin reload or Obsidian restart to apply the change.").addDropdown(t=>t.addOption("smooth_repeat","Smooth Repeat (Fixed Hotkeys: Ctrl/Cmd+Arrows)").addOption("configurable_hotkey","Configurable Hotkeys (Single Scroll)").setValue(this.plugin.settings.scrollMode).onChange(async i=>{this.plugin.settings.scrollMode=i,await this.plugin.saveSettings(),this.display(),new n.Notice("Plugin reload or Obsidian restart required for mode change to take effect.")})),this.plugin.settings.scrollMode==="smooth_repeat"?new n.Setting(e).setName("Scroll Speed (Smooth Repeat)").setDesc(`Pixels per frame. Range: ${d}-${h}.`).addSlider(t=>t.setLimits(d,h,1).setValue(this.plugin.settings.scrollSpeed).setDynamicTooltip().onChange(async i=>{this.plugin.settings.scrollSpeed=i,await this.plugin.saveSettings()})):new n.Setting(e).setName("Lines per Scroll (Single Scroll)").setDesc(`Number of lines to scroll per key press. Range: ${p}-${g}.`).addSlider(t=>t.setLimits(p,g,1).setValue(this.plugin.settings.singleScrollLines).setDynamicTooltip().onChange(async i=>{this.plugin.settings.singleScrollLines=i,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Hotkey Information"});let o=e.createDiv({cls:"setting-item setting-item-description"});if(this.plugin.settings.scrollMode==="smooth_repeat"){o.createEl("p",{text:"In Smooth Repeat mode, hotkeys are fixed:"});let t=o.createEl("ul");t.createEl("li",{text:"Scroll Up: Ctrl + Arrow Up (Cmd + Arrow Up on macOS)"}),t.createEl("li",{text:"Scroll Down: Ctrl + Arrow Down (Cmd + Arrow Down on macOS)"})}else o.createEl("p",{text:"In Configurable Hotkeys mode, change hotkeys in Obsidian's main settings:"}),new n.Setting(o).addButton(t=>t.setButtonText("Go to Hotkey Settings").setCta().onClick(()=>{console.log("Go to Hotkey Settings button clicked!");try{let i=this.app.setting;i&&typeof i.openTabById=="function"?i.openTabById("hotkeys"):(console.warn("Could not navigate directly. Opening general settings."),this.app.commands.executeCommandById("app:open-settings"),new n.Notice("Opened settings. Please navigate to Hotkeys manually."))}catch(i){console.error("Error trying to navigate settings tabs:",i),new n.Notice("Could not navigate automatically.");try{this.app.commands.executeCommandById("app:open-settings")}catch(r){}}}))}};
